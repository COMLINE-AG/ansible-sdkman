---
# tasks file for ansible-sdkman

- name: Determine SDKMAN vars
  set_fact:
    sdkman_dir: '{{ sdkman_dir | default(ansible_env.HOME + "/.sdkman") }}'
    sdkman_user: '{{ sdkman_user | default(ansible_user_id) }}'
    sdkman_group: '{{ sdkman_group | default(ansible_effective_group_id) }}'

- name: Install system packages
  package:
    name: '{{ item }}'
    state: present
  become: yes
  with_items:
    - zip
    - unzip
  when: ansible_os_family != 'Darwin'

- name: Download SDKMAN
  get_url:
    url: https://get.sdkman.io
    dest: /tmp/sdkman_script
    owner: '{{ sdkman_user }}'
    group: '{{ sdkman_group }}'

- name: Run SDKMAN script
  environment:
    SDKMAN_DIR: '{{ sdkman_dir }}'
  command: bash /tmp/sdkman_script
  args:
    creates: '{{ sdkman_dir }}/bin/sdkman-init.sh'
  become: yes

- name: Fix permissions on SDKMAN_DIR
  file:
    path: '{{ sdkman_dir }}'
    state: directory
    owner: '{{ sdkman_user }}'
    group: '{{ sdkman_group }}'
    recurse: true
  become: yes

- name: Configure SDKMAN
  template:
    src: templates/sdkman_config.j2
    dest: '{{ sdkman_dir }}/etc/config'
    backup: yes
    owner: '{{ sdkman_user }}'
    group: '{{ sdkman_group }}'

- name: Update SDKMAN
  shell: source {{ sdkman_dir }}/bin/sdkman-init.sh && sdk selfupdate
  args:
    executable: /bin/bash
  register: sdk_selfupdate
  changed_when: sdk_selfupdate.stdout != 'No update available at this time.'
  become: yes
  become_user: '{{ sdkman_user }}'
  when: sdkman_update

- name: Install SDK candidates/versions
  shell: |
    set -e
    source {{ sdkman_dir }}/bin/sdkman-init.sh
    if 'java' == '{{ item.candidate }}'
    then
      echo 'Y' | sdk install {{ item.candidate }} {{ item.version }}
    else
      sdk install {{ item.candidate }} {{ item.version }}
    fi
  args:
    executable: /bin/bash
  with_items: '{{ sdkman_install_packages }}'
  register: sdk_install
  changed_when: not item.candidate + ' ' + item.version + ' is already installed.' in sdk_install.stdout
  become: yes
  become_user: '{{ sdkman_user }}'

- name: Uninstall SDK candidates/versions
  shell: source {{ sdkman_dir }}/bin/sdkman-init.sh && sdk uninstall {{ item.candidate }} {{ item.version }}
  args:
    executable: /bin/bash
  with_items: '{{ sdkman_uninstall_packages }}'
  register: sdk_uninstall
  changed_when: not item.candidate + ' ' + item.version + ' is not installed.' in sdk_uninstall.stdout
  become: yes
  become_user: '{{ sdkman_user }}'

- name: Get SDK defaults
  shell: source {{ sdkman_dir }}/bin/sdkman-init.sh && sdk current {{ item }}
  args:
    executable: /bin/bash
  register: get_sdk_defaults
  changed_when: false
  with_items: '{{ sdkman_install_packages | map(attribute="candidate") | unique | list }}'

- name: Set SDK defaults
  shell: source {{ sdkman_dir }}/bin/sdkman-init.sh && sdk default {{ item.key }} {{ item.value }}
  args:
    executable: /bin/bash
  with_dict: '{{ sdkman_defaults }}'
  register: sdk_defaults
  changed_when: not item.value in get_sdk_defaults | json_query("results[?item=='"+item.key+"'].stdout|[0]")
  become: yes
  become_user: '{{ sdkman_user }}'
